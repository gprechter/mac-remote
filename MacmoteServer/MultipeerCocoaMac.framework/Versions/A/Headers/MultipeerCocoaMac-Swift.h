// Generated by Apple Swift version 2.0 (swiftlang-700.0.52.2 clang-700.0.65)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if defined(__has_include) && __has_include(<uchar.h>)
# include <uchar.h>
#elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
#endif

typedef struct _NSZone NSZone;

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted) 
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
#endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
#if defined(__has_feature) && __has_feature(modules)
@import AppKit;
@import ObjectiveC;
@import Foundation;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class MGNearbyServiceBrowser;
@class MGSession;
@class NSButton;
@class NSTableView;
@class NSTextField;
@class NSCoder;
@class NSNotification;

SWIFT_CLASS("_TtC17MultipeerCocoaMac23MGBrowserViewController")
@interface MGBrowserViewController : NSViewController

/// Set this to the name of the service you want when setting up using storyboards.
@property (nonatomic, copy) NSString * __nonnull serviceName;

/// The browser passed to the initializer for which this class is presenting a UI for. (read-only)
@property (nonatomic, readonly) MGNearbyServiceBrowser * __nonnull browser;

/// The session passed to the initializer for which this class is presenting a UI for. (read-only)
@property (nonatomic, readonly) MGSession * __nonnull session;
@property (nonatomic) IBOutlet NSButton * __null_unspecified connectButton;
@property (nonatomic) IBOutlet NSButton * __null_unspecified cancelButton;
@property (nonatomic) IBOutlet NSTableView * __null_unspecified tableView;
@property (nonatomic) IBOutlet NSTextField * __null_unspecified infoLabel;
@property (nonatomic) IBOutlet NSButton * __null_unspecified finishButton;

/// The minimum number of peers that need to be in a session, including the local peer. The default value is the minimumAllowedPeers value from MGSession. If set to more than MGSession.maximumAllowedPeers or less than MGSession.minimumAllowedPeers it will automatically be set to the maximum or minimum allowed peers respectively. If set to more than the maximumPeers, a fatalError will be raised.
@property (nonatomic) NSInteger minimumPeers;

/// The maximum number of peers allowed in a session, including the local peer. The default value is the maximumAllowedPeers value from MGSession. If set to more than MGSession.maximumAllowedPeers or less than MGSession.minimumAllowedPeers it will automatically be set to the maximum or minimum allowed peers respectively. If set to less than the minimumPeers, a fatalError will be raised.
@property (nonatomic) NSInteger maximumPeers;
- (nullable instancetype)initWithSession:(MGSession * __nonnull)session browser:(MGNearbyServiceBrowser * __nonnull)browser OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * __nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewDidAppear;
- (void)viewDidDisappear;
- (void)connect:(NSButton * __nonnull)sender;
- (void)cancel:(NSButton * __nonnull)sender;
- (void)finish:(NSButton * __nonnull)sender;
- (void)updateInfoLabel;
- (void)sessionUpdated:(NSNotification * __nonnull)notification;
@end

@class NSTableColumn;
@class NSView;

@interface MGBrowserViewController (SWIFT_EXTENSION(MultipeerCocoaMac)) <NSTableViewDataSource, NSTableViewDelegate, NSControlTextEditingDelegate>
- (NSInteger)numberOfRowsInTableView:(NSTableView * __nonnull)tableView;
- (NSView * __nullable)tableView:(NSTableView * __nonnull)tableView viewForTableColumn:(NSTableColumn * __nullable)tableColumn row:(NSInteger)row;
- (void)tableViewSelectionDidChange:(NSNotification * __nonnull)notification;
@end

@class NSNumber;
@class MGPeerID;


/// The MGNearbyServiceBrowserDelegate protocol defines methods that a MGNearbyServiceBrowser objectâ€™s delegate can implement to handle browser-related and invitation events. Since all activity is asynchronous in nature, you cannot make any assumptions of the thread on which the delegate's methods will be called.
SWIFT_PROTOCOL("_TtP17MultipeerCocoaMac30MGNearbyServiceBrowserDelegate_")
@protocol MGNearbyServiceBrowserDelegate
@optional

/// The browser object that failed to start browsing.
///
/// \param browser The browser object that failed to start browsing.
///
/// \param error An error object indicating what went wrong.
- (void)browser:(MGNearbyServiceBrowser * __nonnull)browser didNotStartBrowsingForPeers:(NSDictionary<NSString *, NSNumber *> * __nonnull)error;

/// The browser object that started browsing. Track this property if you passed nil to the local peer ID's name. The assigned name will now be available through the myPeerID property of the browser.
///
/// \param browser The browser object that started browsing and who resolved the local peer's name.
- (void)browserDidStartSuccessfully:(MGNearbyServiceBrowser * __nonnull)browser;

/// Called whenever the browser object stops searching for nearby services. Use this method call to delete the cache and clear any saved state about browsers so that the user does not see duplicate services when actually they all point to the same one.
///
/// \param browser The browser object that stopped.
- (void)browserStoppedSearching:(MGNearbyServiceBrowser * __nonnull)browser;
@required

/// Called when a nearby peer is found. The peer ID provided to this delegate method can be used to invite the nearby peer to join a session.
///
/// \param browser The browser object that found the nearby peer.
///
/// \param peerID The unique ID of the peer that was found.
///
/// \param info The info dictionary advertised by the discovered peer. For more information on the contents of this dictionary, see the documentation for <code>initWithPeer:discoveryInfo:serviceType:
/// </code> in <code>MGNearbyServiceAdvertiser
/// </code> Class Reference.
- (void)browser:(MGNearbyServiceBrowser * __nonnull)browser foundPeer:(MGPeerID * __nonnull)peerID withDiscoveryInfo:(NSDictionary<NSString *, NSString *> * __nullable)info;

/// Called when a nearby peer is lost. This callback informs your app that invitations can no longer be sent to a peer, and that your app should remove that peer from its user interface.
///
/// \param browser The browser object that lost the nearby peer.
///
/// \param peerID The unique ID of the nearby peer that was lost.
- (void)browser:(MGNearbyServiceBrowser * __nonnull)browser lostPeer:(MGPeerID * __nonnull)peerID;
@optional

/// Called when a nearby peer's discovery info is updated. The peer has already been discovered and the peer ID provided to this delegate method can be used to invite the nearby peer to join a session.
///
/// \param browser The browser object that updated the nearby peer.
///
/// \param peerID The unique ID of the peer that was updated.
///
/// \param info The info dictionary advertised by the discovered peer. For more information on the contents of this dictionary, see the documentation for <code>initWithPeer:discoveryInfo:serviceType:
/// </code> in <code>MGNearbyServiceAdvertiser
/// </code> Class Reference.
- (void)browser:(MGNearbyServiceBrowser * __nonnull)browser didUpdatePeer:(MGPeerID * __nonnull)peerID withDiscoveryInfo:(NSDictionary<NSString *, NSString *> * __nullable)withDiscoveryInfo;

/// Called when a nearby peer could not be resolved. The peer could not be resolved and you probably cannot connect to this peer. Handle the error appropriately.
///
/// \param browser The browser object that updated the nearby peer.
///
/// \param peerID The unique ID of the peer that was updated.
///
/// \param errorDict The error dictionary giving reason as to why the peer could not be resolved.
- (void)browser:(MGNearbyServiceBrowser * __nonnull)browser couldNotResolvePeer:(MGPeerID * __nonnull)peerID withError:(NSDictionary<NSString *, NSNumber *> * __nonnull)errorDict;
@required

/// Called when an invitation to join a session is received from a nearby peer.
///
/// \param browser The browser object that was invited to join the session.
///
/// \param peerID The peer ID of the nearby peer that invited your app to join the session.
///
/// \param context An arbitrary piece of data received from the nearby peer. This can be used to provide further information to the user about the nature of the invitation.
///
/// \param invitationHandler A block that your code <em>must</em> call to indicate whether the advertiser should accept or decline the invitation, and to provide a session with which to associate the peer that sent the invitation.
- (void)browser:(MGNearbyServiceBrowser * __nonnull)browser didReceiveInvitationFromPeer:(MGPeerID * __nonnull)peerID invitationHandler:(void (^ __nonnull)(BOOL, MGSession * __nonnull))invitationHandler;
@end


@interface MGBrowserViewController (SWIFT_EXTENSION(MultipeerCocoaMac)) <MGNearbyServiceBrowserDelegate>
- (void)browserDidStartSuccessfully:(MGNearbyServiceBrowser * __nonnull)browser;
- (void)browser:(MGNearbyServiceBrowser * __nonnull)browser didNotStartBrowsingForPeers:(NSDictionary<NSString *, NSNumber *> * __nonnull)error;
- (void)browser:(MGNearbyServiceBrowser * __nonnull)browser foundPeer:(MGPeerID * __nonnull)peerID withDiscoveryInfo:(NSDictionary<NSString *, NSString *> * __nullable)info;
- (void)browser:(MGNearbyServiceBrowser * __nonnull)browser lostPeer:(MGPeerID * __nonnull)peerID;
- (void)browser:(MGNearbyServiceBrowser * __nonnull)browser didReceiveInvitationFromPeer:(MGPeerID * __nonnull)peerID invitationHandler:(void (^ __nonnull)(BOOL, MGSession * __nonnull))invitationHandler;
- (void)browserStoppedSearching:(MGNearbyServiceBrowser * __nonnull)browser;
@end



/// Searches (by service type) for services offered by nearby devices using infrastructure Wi-Fi, peer-to-peer Wi-Fi, and Bluetooth, and provides the ability to easily invite those devices to a Cocoa Multipeer session (MGSession). The Browser class combines the advertiser and browser into a single class so invitations will also be sent to the browser.
SWIFT_CLASS("_TtC17MultipeerCocoaMac22MGNearbyServiceBrowser")
@interface MGNearbyServiceBrowser : NSObject

/// The service type to browse for. (read-only)
@property (nonatomic, readonly, copy) NSString * __nonnull serviceType;

/// The local peer ID for this instance. (read-only)
@property (nonatomic, readonly) MGPeerID * __nonnull myPeerID;

/// The info dictionary passed when this object was initialized. (read-only)
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * __nullable discoveryInfo;

/// The delegate object that handles browser-related events.
@property (nonatomic, weak) id <MGNearbyServiceBrowserDelegate> __nullable delegate;

/// Initializes the nearby service browser object with the TCP connection protocol.
///
/// \param peer The local peer ID for this instance.
///
/// \param discoverInfo A dictionary of key-value pairs that are made available to browsers. Each key and value must be an NSString object. This data is advertised using a Bonjour TXT record, encoded according to RFC 6763 (section 6). As a result:<ul><li>The key-value pair must be no longer than 255 bytes (total) when encoded in UTF-8 format with an equals sign (=) between the key and the value.</li><li>Keys cannot contain an equals sign.</li><li>For optimal performance, the total size of the keys and values in this dictionary should be no more than about 400 bytes so that the entire advertisement can fit within a single Bluetooth data packet. For details on the maximum allowable length, read Monitoring a Bonjour Service.</li></ul>
///
/// \param serviceType Must be 1â€“15 characters long. Can contain only ASCII lowercase letters, numbers, and hyphens. This name should be easily distinguished from unrelated services. For example, a Foo app made by Bar company could use the service type <code>foo-bar
/// </code>.
- (nonnull instancetype)initWithPeer:(MGPeerID * __nonnull)myPeerID discoveryInfo:(NSDictionary<NSString *, NSString *> * __nullable)discoveryInfo serviceType:(NSString * __nonnull)serviceType OBJC_DESIGNATED_INITIALIZER;

/// Starts browsing for peers. After this method is called (until you call stopBrowsingForPeers), the framework calls your delegate's browser:foundPeer:withDiscoveryInfo: and browser:lostPeer: methods as new peers are found and lost. After starting browsing, other devices can discover your device as a device that it can connect to until you call the stop browsing for peers method. However, if the device accepts a connection from another peer the stopBrowsingForPeers method is called automatically.
- (void)startBrowsingForPeers;

/// Stops browsing for peers. This will stop the delegate callbacks for discovering peers.
- (void)stopBrowsingForPeers;

/// Invites a discovered peer to join a Cocoa Multipeer session.\Warning 
///
/// This function makes no guarantees that a connection will be established to the peer even if the <code>browser:lostPeer:
/// </code> method has not yet been called becuase the connection might have dropped between recieving this method call and making the connection request.
///
/// \param peerID The ID of the peer to invite.
///
/// \param session The session you wish the invited peer to join.
///
/// \param error Multipeer.PeerNotFound error if the peer could not be found. To ensure this error is not thrown make sure you only pass in peers that you have recieved using the <code>delegate
/// </code>'s <code>browser:foundPeer:withDiscoveryInfo:
/// </code> method and the peer has not yet been sent to the <code>browser:lostPeer:
/// </code> method. Throws a <code>ConnectionAttemptFailed
/// </code> if the connection can't be established.
- (BOOL)invitePeer:(MGPeerID * __nonnull)peerID toSession:(MGSession * __nonnull)session error:(NSError * __nullable * __null_unspecified)error;
@end


@interface MGNearbyServiceBrowser (SWIFT_EXTENSION(MultipeerCocoaMac))
@end


@interface MGNearbyServiceBrowser (SWIFT_EXTENSION(MultipeerCocoaMac))
@property (nonatomic, readonly, copy) NSString * __nonnull description;
@end


@interface MGNearbyServiceBrowser (SWIFT_EXTENSION(MultipeerCocoaMac))
@end




/// The MGPeerID class represents a peer in a multipeer session. The Cocoa Multipeer framework is responsible for creating peer objects that represent other devices. Your app is responsible for creating a single peer object that represents the instance of your app that is running on the local device. To create a new peer ID for the local app and associate a display name with that ID, call initWithDisplayName:. The peerâ€™s name must be no longer than 63 bytes in UTF-8 encoding.
SWIFT_CLASS("_TtC17MultipeerCocoaMac8MGPeerID")
@interface MGPeerID : NSObject
@property (nonatomic, copy) NSString * __nullable name;

/// The display name for this peer. (read-only). If you passed nil into the initalizer this will be an empty string until the framework sets everything up and assigns a name to the Peer. In order to track this property try accessing it after For other peer objects provided to you by the framework, this property is provided by the peer and cannot be changed.
@property (nonatomic, readonly, copy) NSString * __nonnull displayName;

/// Initializes a peer.
///
/// \param displayName The display name for the local peer. If you use the multipeer browser view controller, this name is shown.
/// The display name is intended for use in UI elements, and should be short and descriptive of the local peer. The maximum allowable length is 63 bytes in UTF-8 encoding. The displayName parameter may be nil, if it is nil the framework will assign a name for you based on the device's name set by the user. Until the name is assgined the name returned by the <code>displayName
/// </code> paramter will be an empty String.
///
/// \returns  Returns an initialized object.
- (nonnull instancetype)initWithDisplayName:(NSString * __nullable)displayName OBJC_DESIGNATED_INITIALIZER;
@end


@interface MGPeerID (SWIFT_EXTENSION(MultipeerCocoaMac))
@property (nonatomic, readonly, copy) NSString * __nonnull description;
@end


@interface MGPeerID (SWIFT_EXTENSION(MultipeerCocoaMac))
@property (nonatomic, readonly) NSInteger hashValue;
@end

@class NSData;
@class NSInputStream;
@class NSOutputStream;
@protocol MGSessionDelegate;


/// <h4>Abstract:</h4>
/// A MGSession facilitates communication among all peers in a multipeer
/// session.
///
/// <h4>Discussion:</h4>
/// To start a multipeer session with remote peers, a MGPeerID that
/// represents the local peer needs to be supplied to the init method.
///
/// Once a peer is added to the session on both sides, the delegate
/// callback -session:peer:didChangeState: will be called with
/// MGSessionStateConnected state for the remote peer.
///
/// Data messages can be sent to a connected peer with the -sendData:
/// toPeers:withMode:error: method.
///
/// The receiver of data messages will receive a delegate callback
/// -session:didReceiveData:fromPeer:.
///
/// Resources referenced by NSURL (e.g. a file) can be sent to a connected
/// peer with the -sendResourceAtURL:toPeer:withTimeout:completionHandler:
/// method. The completionHandler will be called when the resource is fully
/// received by the remote peer, or if an error occurred during
/// transmission. The receiver of data messages will receive a delegate
/// callbacks -session:didStartReceivingResourceWithName:fromPeer:
/// withProgress: when it starts receiving the resource and -session:
/// didFinishReceivingResourceWithName:fromPeer:atURL:withError:
/// when the resource has been fully received.
///
/// A byte stream can be sent to a connected peer with the
/// -startStreamWithName:toPeer:error: method. On success, an
/// NSOutputStream  object is returned, and can be used to send bytes to
/// the remote peer once the stream is properly set up. The receiver of the
/// byte stream will receive a delegate callback -session:didReceiveStream:
/// withName:fromPeer:
///
/// Delegate calls occur on the main thread. If your app needs to
/// perform a long running action on a particular run loop or operation queue, its
/// delegate method should explicitly dispatch or schedule that work. Only small tasks and UI updates should exist in the delegate methods.
SWIFT_CLASS("_TtC17MultipeerCocoaMac9MGSession")
@interface MGSession : NSObject

/// The maximum number of peers that a session can support, including the local peer.
+ (NSInteger)maximumAllowedPeers;
+ (void)setMaximumAllowedPeers:(NSInteger)value;

/// The minimum number of peers that a session can support, including the local peer.
+ (NSInteger)minimumAllowedPeers;
+ (void)setMinimumAllowedPeers:(NSInteger)value;
+ (NSString * __nonnull)sessionPeerStateUpdatedNotification;

/// A local identifier that represents the device on which your app is currently running. (read-only)
@property (nonatomic, readonly) MGPeerID * __nonnull myPeerID;

/// The delegate object that handles session-related events.
@property (nonatomic, weak) id <MGSessionDelegate> __nullable delegate;

/// An array of all peers that are currently connected to this session. (read-only)
@property (nonatomic, readonly, copy) NSArray<MGPeerID *> * __nonnull connectedPeers;

/// This property determines how much data is written/read at a time.
+ (NSInteger)packetSize;

/// Creates a Cocoa Multipeer session.
///
/// \param peer A local identifier that represents the device on which your app is currently running.
///
/// \returns  Returns the initialized session object, or nil if an error occurs.
- (nonnull instancetype)initWithPeer:(MGPeerID * __nonnull)peer OBJC_DESIGNATED_INITIALIZER;

/// Sends a message encapsulated in an NSData object to nearby peers. For best results keep the NSData size to 255 bytes. However, larger instances are supported, but handling recieivng this larger data is left up to you. See the delegate's session:didRecieveData:fromPeer method.\Warning 
///
/// This method blocks for very very large NSData instances, for such cases do not call this method on the main thread, otherwise calling it on the main thread is fine. In general, we move the data into packets on the thread that this method is called on but send data over the network on a background thread. If you think the copying is going to be an expensive operation dispatch this on a concurrent/serial background queue using Grand Central Dispatch.\See 
///
/// <code>session:didRecieveData:fromPeer
/// </code>
///
/// \param data An object containing the message to send.
///
/// \param peerIDs An array of peer ID objects representing the peers that should receive the message.
///
/// \param error MultipeerError.NotConnected error if you are attempting to send data to a peer that is not connected. Try checking the status of the peer again, reestablishing the connection by allowing the user to reinvite the lost device.
- (BOOL)sendData:(NSData * __nonnull)data toPeers:(NSArray<MGPeerID *> * __nonnull)peerIDs error:(NSError * __nullable * __null_unspecified)error;

/// Sets up an initial connection to the peer.
///
/// \param peer The peer to whom a connection is being established.
///
/// \param inputStream The inputStream over which data can be recieved.
///
/// \param outputStream The outputStream over which data can be sent.
///
/// \param error Throws a ConnectionAttemptFailed if there are too many connected peers.
- (BOOL)initialConnectToPeer:(MGPeerID * __nonnull)peer inputStream:(NSInputStream * __nonnull)inputStream outputStream:(NSOutputStream * __nonnull)outputStream error:(NSError * __nullable * __null_unspecified)error;

/// Finalizes the connection to the peer.
///
/// \param peer The peer to which the connection is now open.
///
/// \param error Throws a PeerNotFound error if the peer doesn't exist or a connection attempt failed if the peer's streams aren't alive.
- (BOOL)finalizeConnectionToPeer:(MGPeerID * __nonnull)peer error:(NSError * __nullable * __null_unspecified)error;

/// Rejects the connection to the peer.
///
/// \param peer The peer to reject the connection to.
///
/// \param error A peer not found error if the peer passed couldn't be found.
- (BOOL)rejectConnectionToPeer:(MGPeerID * __nonnull)peer error:(NSError * __nullable * __null_unspecified)error;

/// Disconnects the remote peer from the session. Usually, you would call this on the server and not the client. See disconnect for client side disconnects.
///
/// \param peer The peer to disconnect from the server.
///
/// \param error A <code>MultipeerError.PeerNotFound
/// </code> error if the peer doesn't exist in the list of peers returned by <code>connectedPeers
/// </code>.
- (BOOL)disconnectFromPeer:(MGPeerID * __nonnull)peer error:(NSError * __nullable * __null_unspecified)error;

/// Disconnects the local peer from the session. This will close all connections on the peer whether its acting as a client or a server.
- (void)disconnect;
@end

@class NSStream;

@interface MGSession (SWIFT_EXTENSION(MultipeerCocoaMac)) <NSStreamDelegate>
- (void)stream:(NSStream * __nonnull)aStream handleEvent:(NSStreamEvent)eventCode;
@end


@interface MGSession (SWIFT_EXTENSION(MultipeerCocoaMac))
@property (nonatomic, readonly, copy) NSString * __nonnull description;
@end


@interface MGSession (SWIFT_EXTENSION(MultipeerCocoaMac))
@end

enum MGSessionState : NSInteger;


/// The MGSessionDelegate protocol defines methods that a delegate of the MGSession class can implement to handle session-related events. For more information, see MGSession Class Reference.
SWIFT_PROTOCOL("_TtP17MultipeerCocoaMac17MGSessionDelegate_")
@protocol MGSessionDelegate
@optional

/// Called when the state of a nearby peer changes. There are no guarantees about which thread this will be called on.
///
/// \param session The session that manages the nearby peer whose state changed.
///
/// \param peerID The ID of the nearby peer whose state changed.
///
/// \param state The new state of the nearby peer.
- (void)session:(MGSession * __nonnull)session peer:(MGPeerID * __nonnull)peerID didChangeState:(enum MGSessionState)state;

/// Indicates that an NSData object has been received from a nearby peer. You can be assured that this will be called on the main thread.
///
/// \param session The session through which the data was received.
///
/// \param data An object containing the received data.
///
/// \param peerID The peer ID of the sender.
- (void)session:(MGSession * __nonnull)session didReceiveData:(NSData * __nonnull)data fromPeer:(MGPeerID * __nonnull)peerID;
@end


/// Indicates the current state of a given peer within a session.
///
/// <ul><li>NotConnected: The peer is not (or is no longer) in this session.</li><li>Connecting:   A connection to the peer is currently being established.</li><li>Connected:    The peer is connected to this session.</li></ul>
typedef SWIFT_ENUM(NSInteger, MGSessionState) {

/// The peer is not (or is no longer) in this session.
  MGSessionStateNotConnected = 0,

/// A connection to the peer is currently being established.
  MGSessionStateConnecting = 1,

/// The peer is connected to this session.
  MGSessionStateConnected = 2,
};


@interface NSNetService (SWIFT_EXTENSION(MultipeerCocoaMac))
+ (NSDictionary<NSString *, NSString *> * __nullable)dictionaryWithTXTData:(NSData * __nullable)data;
@end


@interface NSStream (SWIFT_EXTENSION(MultipeerCocoaMac))
@property (nonatomic, readonly) BOOL isAlive;
@end

#pragma clang diagnostic pop
